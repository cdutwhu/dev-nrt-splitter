Hey Qing/Pete,

- Apologies this couldn’t get sent before due to lockout from ESA account - all now resolved so….

As promised, here's my take on the requirements for the next NRT
utility - the tool to create views or splits of the completed
report data...

There are these 5 domains in the NAPLAN test suite currently:
- Grammar & Punctuation
- Reading
- Numeracy
- Spelling
- Writing

The reports generated by NRT fall into 5 broad categories:

Event-based reports; 
--------------------
A row of data for ***[each test event]*** that was undertaken by ***[a student]***.
So there will be a row for the writing test, a row for the numeracy test etc.
The are typically the ***largest*** reports in terms of ***rows***.
These reports ***SHOULD*** be processed by the splitting tool.

Student-based reports;
----------------------
Aggregates the results from all tests taken by ***a student***, so each row contains details of all of the domain results.
These are typically the ***largest*** reports in terms of ***columns***.
These reports ***SHOULD*** be processed by the splitting tool.

Object/Simple reports;
----------------------
Literally just transformations of the raw data objects in the RRD into tabualr csv strucures.
These reports don't need processing by the splitting tool.

Codeframe reports;
------------------
Reports only focused on the internal structure of the test (the codeframe), not actual student results.
These reports don't need processing by the splitting tool.

Aggregate reports;
------------------
collector/emitter type reports that read the whole input stream, but which summarise the data that has passed through them. E.g. how many times was a
particular test item seen by students during the test.
***SOME*** of these reports may be processed by the splitting tool.

******************

If you pull the development branch of github/nsip/dev-nrt and do a go build in the /dev-nrt/cmd/nrt folder, the current nrt application should build, and if you run it from that folder it will read input data from the /dev-nrt/testdata (I tend to use the n2sif.xml only for speed)folder and produce the following structure of output folders in the /dev-nrt/cmd/nrt folder:

├── config
│   └── internal
├── kv
└── out
    ├── item_printing
    ├── null
    ├── qa
    ├── system_reports
    └── writing_extract

config: is where a .toml configuraiton file exists for every named report in the NRT family, some 70+ reports. config/internal is for 'reports' that are part of the processing chain, but don't produce user output, so for these purposes can be ignored.

kv: is where the ingested data gets stored in a k/v database to feed the report engines

out: is where the results.csv file go which is what we're interested in.
The out folder names are kept (for now) from nias2 and there is not a straight mapping between report type and ouput folder.
- item_printing; long reports in the event-based style
- null; /dev/null style scratchpad for internal use, ignore
- qa; mostly aggregate/diagnostic reports, but some splittables in here
- system_reports; pretty much everything ends up in here
- writing_extract; specific reports to feed downstream marking systems, we won't ever process these reports further.

So, first part of the problem-space; splitting the reports, with a slight difference between event-based and student-based outputs:

Event-based reports, let's use an example 
/out/system_reports/systemDomainScores.csv

All event-based reports have been through a pre-processor that adds 3 columns at the start of the report;

School | YrLevel | Domain


*************************************************************


For student-based reports, for example
/out/system_reports/systemParticipation.csv
the same 3 columns are added by pre-processor, but the Domain column is always set to contain the token ‘AllDomains'


*************************************************************


The tool we need should look at csv files with these 3 extra columns, and offer the capability to split the large ouput files using any permutation of the three attributes to create a helpful sub-view of the data.

So (partial example), if the user decided to configure systemDomainScores to split the results on a School-Domain-YrLevel basis, the output would be something like this:

out/
├── 22156 // we create a folder for each school id
│   ├── GrammarAndPunctuation // then for each domain
│   │   ├── yr3 // then for each year-level
│   │   │   └── systemDomainScores.csv // finally just relevant rows
│   │   ├── yr5
│   │   │   └── systemDomainScores.csv
│   │   ├── yr7
│   │   │   └── systemDomainScores.csv
│   │   └── yr9
│   │       └── systemDomainScores.csv
│   ├── Numeracy
│   ├── Reading
│   ├── Spelling
│   └── Writing
└── system_reports
    └── systemDomainScores.csv // original large report stays in ouput location

If the scheme was Domain-School-YrLevel then ouput would be (again partial example):

out/
├── GrammarAndPunctuation // we create a folder for each domain
│   └── 22156 // then for each school
│       ├── yr3
│       │   └── systemDomainScores.csv // finally just relevant rows
│       ├── yr5
│       │   └── systemDomainScores.csv
│       ├── yr7
│       │   └── systemDomainScores.csv
│       └── yr9
│           └── systemDomainScores.csv 
├── Numeracy
├── Reading
├── Spelling
├── Writing
└── system_reports
    └── systemDomainScores.csv // original large report stays in ouput location

So what we want is the user to be able to ask for any permutation of the 3 columns to create smaller splits of the data.
Slightly easier for the student-based reports as there are no choices for domains, it's always AllDomains.

I have experimented with this toolkit:
https://github.com/shenwei356/csvtk
which has a specific command to split csv files based on the content of the
columns. However we need to extract this functinality into our own tool to be able to customise it to give the user experience that we want. Equally if there are other methods we can use, happy to do so.

The key thing to watch out for is to keep a relatively small pool of file handles active at any time as this is hard to overcome for users.

The second part of the challenge is to create a format that we can insert into the config file of each report that sets the splitting regime easily. We can place defaults in the file, but then allow the user to adjust as they see fit.
Something such as (int the toml file)…

[report-splitting]
enabled = true / false
schema = [“School”,”YrLevel”,”Domain”] or [“Domain”, “School”, “YrLevel”] etc. etc.

any better matrix representations happily considered :)

I also think we'll run the splitting after the report generation, so if the splitting tool needs to read the config files to know what to do that would be fine - much easier than trying to figure it out dynamically.

Happy, of course, to discuss further - email, teams etc. any time.

Cheers,

Matt